{"version":3,"sources":["components/media/AsmaaQuoteLogo.png","temp/myquotes.js","components/media/categories.js","components/AsmaaQuoteMenu.js","components/AsmaaQuoteComponent.js","components/firebase/config.js","components/AsmaaQuoteContent.js","components/AsmaaQuoteMain.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","title","category","content","author","Categories","Header","Layout","AsmaaQuoteMenu","props","state","console","log","length","style","position","zIndex","width","href","target","alt","src","Logo","height","theme","mode","defaultSelectedKeys","this","selected","toString","lineHeight","float","map","item","key","Item","to","name","Component","Meta","Card","AsmaaQuoteComponent","avatar","type","icon","fontSize","color","description","quote","process","db","Firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Content","AsmaaQuoteContent","fetchData","setState","quotes","collection","where","get","then","data","forEach","catch","error","padding","marginTop","gutter","xs","sm","md","lg","xl","Footer","AsmaaQuoteMain","className","textAlign","App","dotenv","config","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d451452.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AsmaaQuoteLogo.ddc725ed.png\";","module.exports = [\r\n  {\r\n    title: \"The highest level of love üíï\",\r\n    category: \"MyQuotes\",\r\n    content: \"The highest level of love is to be able to relieve the pain of our loved ones even though we did not live by ourselves.\",\r\n    author: \"Asmaa\"\r\n  }, {\r\n    title: \"The effect of a smile üòä\",\r\n    category: \"MyQuotes\",\r\n    content: \"The effect of a smile does not change by different cultures, it is the universal language of kindness ü§ó\",\r\n    author: \"Asmaa\"\r\n  },\r\n  {\r\n    title: \"Beauty üå∏\",\r\n    category: \"MyQuotes\",\r\n    content: \"Beauty always reserved in details, don't let the big picture steal your attention! \",\r\n    author: \"Asmaa\"\r\n  },\r\n  {\r\n    title: \"Negative people üò™\",\r\n    category: \"MyQuotes\",\r\n    content: \"Life is full by negative people, mostly you have to listen to them, be careful not to get of their negative energy.\",\r\n    author: \"Asmaa\"\r\n  },\r\n  {\r\n    title: \"When To Stop ü§ê\",\r\n    category: \"MyQuotes\",\r\n    content: \"When discussion turns to controversy, stop it immediately, it will be a waste of time and energy for both of you.\",\r\n    author: \"Asmaa\"\r\n  },\r\n  {\r\n    title: \"Successful Person ‚ú®\",\r\n    category: \"MyQuotes\",\r\n    content: \"Every successful one has two projects, one to improve himself and the other to improve people around him\",\r\n    author: \"Asmaa\"\r\n  },\r\n  {\r\n    title: \"Reality of time ‚åö\",\r\n    category: \"MyQuotes\",\r\n    content: \"We can not say that the time is a constant at all. It is fully connected to the heart and its speed is directly proportional with the peaceful of the heart.\",\r\n    author: \"Asmaa\"\r\n  }\r\n];\r\n\r\n","const Categories = [\r\n    {\r\n        'name': 'MyQuotes',\r\n        'color': '#FFFFFF',\r\n        'icon': 'coffee',\r\n        'color': '#ff1a75'\r\n    },\r\n    {\r\n        'name': 'Life',\r\n        'color': '#FFFFFF',\r\n        'icon': 'heart',\r\n        'color': '#c61aff'\r\n    },\r\n    {\r\n        'name': 'Motivation',\r\n        'color': '#FFFFFF',\r\n        'icon': 'star',\r\n        'color': '#1890FF'\r\n    }\r\n ];\r\n\r\n export default Categories;","/* \r\n  author: Asmaa Mirkhan ~ 2019\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport { Layout, Menu } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport Categories from './media/categories';\r\nimport Logo from './media/AsmaaQuoteLogo.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst { Header } = Layout;\r\n\r\nclass AsmaaQuoteMenu extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        console.log(Categories.length)\r\n        return (\r\n            <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\r\n\r\n                <a href='https://github.com/asmaamirkhan/AsmaaQuote' target='_blank'>\r\n                    <img alt='AsmaaQuoteLogo' src={Logo} style={{ height: '40px'}} />\r\n                </a>\r\n\r\n                <Menu\r\n                    theme=\"dark\"\r\n                    mode=\"horizontal\"\r\n                    defaultSelectedKeys={this.props.selected.toString()}\r\n                    style={{ lineHeight: '64px',  float: 'right' }}\r\n                >\r\n\r\n                    {\r\n                        Categories.map((item, key) => {\r\n                            return (<Menu.Item key={key}><Link to={'/' + item.name}> {item.name}</Link></Menu.Item>)\r\n                        })\r\n                    }\r\n                    <Menu.Item key={Categories.length+1}><Link to={'/About'}>About</Link></Menu.Item>\r\n                </Menu>\r\n            </Header>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default AsmaaQuoteMenu;","/* \r\n  author: Asmaa Mirkhan ~ 2019\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Card, Divider, Tag, Icon } from \"antd\";\r\n\r\nconst { Meta } = Card;\r\n\r\nclass AsmaaQuoteComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    return (\r\n      <Card style={{ height: \"100%\" }}>\r\n        <Meta\r\n          title={this.props.title}\r\n          avatar={\r\n            <Icon type={this.props.category.icon} style={{ fontSize: 45, color: this.props.category.color  }} />\r\n          }\r\n          description={\r\n            <div>\r\n              <spam>Category: </spam>\r\n              <Tag >{this.props.category.name}</Tag>\r\n              \r\n            </div>\r\n          }\r\n        />\r\n\r\n        <Divider />\r\n        <p style={{ fontSize: \"large\" }}>{this.props.quote}</p>\r\n        <Divider style={{ fontSize: \"x-small\" }}>{this.props.author}</Divider>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AsmaaQuoteComponent;\r\n","import Firebase from 'firebase';\r\nconst config = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n};\r\nconsole.log(process.env)\r\nlet app = Firebase.initializeApp(config);\r\nexport const db = app.firestore();","/* \r\n  author: Asmaa Mirkhan ~ 2019\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Layout, Col, Row } from \"antd\";\r\nimport AsmaaQuoteComponent from \"./AsmaaQuoteComponent\";\r\nimport { db } from \"./firebase/config\";\r\n\r\nimport Data from \"../temp/myquotes\";\r\n\r\nconst { Content } = Layout;\r\n\r\nclass AsmaaQuoteContent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      quotes: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  \r\n\r\n  fetchData = () => {\r\n    this.setState({quotes: []}, ()=>{\r\n      db.collection(\"quotes\")\r\n      .where(\"category\", \"==\", this.props.category.name)\r\n      .get()\r\n      .then(data => {\r\n        data.forEach(item => {\r\n          this.setState({ quotes: [...this.state.quotes, item.data()] });\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n    })\r\n    \r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Content style={{ padding: \"10px 25px\", marginTop: 64 }}>\r\n        <Row gutter={12} type=\"flex\">\r\n          {this.state.quotes.map((item, key) => {\r\n            return (\r\n              <Col\r\n                xs={24}\r\n                sm={12}\r\n                md={12}\r\n                lg={8}\r\n                xl={6}\r\n                style={{ marginTop: 16 }}\r\n              >\r\n                <AsmaaQuoteComponent\r\n                  title={item.title}\r\n                  category={this.props.category}\r\n                  quote={item.content}\r\n                  author={item.author}\r\n                />\r\n              </Col>\r\n            );\r\n          })}\r\n        </Row>\r\n      </Content>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AsmaaQuoteContent;\r\n","/* \r\n  author: Asmaa Mirkhan ~ 2019\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport AsmaaQuoteMenu from './AsmaaQuoteMenu';\r\nimport AsmaaQuoteContent from './AsmaaQuoteContent';\r\nimport { Layout } from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\n\r\nconst { Content, Footer } = Layout;\r\n\r\nclass AsmaaQuoteMain extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Layout className=\"layout\">\r\n                    <AsmaaQuoteMenu selected={this.props.selected} />\r\n                   <AsmaaQuoteContent category={this.props.category}/>\r\n                    <Footer style={{ textAlign: 'center' }}>\r\n                        AsmaaQuote Project ¬©2019 Made with ‚ù§ by <a href='https://www.linkedin.com/in/asmaamirkhan/' target='_blank'>Asmaa Mirkhan</a>\r\n                    </Footer>\r\n                </Layout>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default AsmaaQuoteMain;","import React from \"react\";\r\nimport AsmaaQuoteMain from \"./components/AsmaaQuoteMain\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport Categories from \"./components/media/categories\";\r\nimport dotenv from 'dotenv';\r\nfunction App() {\r\n  dotenv.config()\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        {Categories.map((item, key) => {\r\n          return (\r\n            <Route\r\n              path={\"/\" + item.name}\r\n              component={() => (\r\n                <AsmaaQuoteMain category={item} selected={key} />\r\n              )}\r\n            />\r\n          );\r\n        })}\r\n\r\n        <Route\r\n          path=\"/About\"\r\n          component={() => (\r\n            <AsmaaQuoteMain category={Categories[0]} selected={Categories.length+1} />\r\n          )}\r\n        />\r\n        <Route\r\n          path=\"/\"\r\n          component={() => <AsmaaQuoteMain category={Categories[0]} selected={0} />}\r\n        />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\r\n<App />\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}